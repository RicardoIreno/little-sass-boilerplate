$axies: (
	h: row,
	v: column,
);
$bks: ("sm", "md", "lg");

$content-values: (
	"flex-start",
	"center",
	"flex-end",
	"baseline",
	"space-around",
	"space-between",
	"space-evenly"
);

$itens-values: ("flex-start", "center", "flex-end", "baseline");

// === CONTAINERS === //

.d-h,
.d-v {
	box-sizing: border-box;
	display: flex;
	width: 100%;
	@include transition;
}

.d-v {
	flex-direction: column;
}
.d-wrap {
	flex-wrap: wrap;
}

/* CONTAINER'S ALIGNAMENTS
 * d-ht - horizontal top
 * d-hb - horizontal bottom
 * d-hc - horizontal center
 * d-hr - horizontal right
 * ...
 */
@each $v in $content-values {
	.jc-#{$v} {
		justify-content: $v;
	}
	.ac-#{$v} {
		justify-content: $v;
	}
}

/* BREAKPOINS DIRECTIONS
 * d-sm-h - small horizontal
 * d-sm-v - small vertical
 * d-md-h - mediun horizontal
 * ...
 */
@each $axis, $ax_value in $axies {
	@each $bk in $bks {
		.d-#{$bk}-#{$axis} {
			@include up-to("#{$bk}") {
				flex-direction: $ax_value;
			}
		}
	}
}

// MORE

.d-wrap {
	flex-wrap: wrap;
}
.d-nowrap {
	flex-wrap: nowrap;
}

// === GRID === //

// Utility grid system
// container: u-grid
// columns: u-col-X-of-Y
$cols: 5;

.u-grid {
	margin: 0 auto;
	width: 100%;

	&::after {
		clear: both;
		content: "";
		display: table;
	}

	[class^="u-col-"] {
		float: left;
		padding: 1rem;
	}
}

$jc: 1;

@for $i from 1 through $cols {
	@for $j from $jc through $cols {
		@if $i !=$j {
			.d-col-#{$i}-of-#{$j} {
				width: calc(#{$i} * (100% / #{$j}));
			}
		}
	}

	$jc: $jc + 1;
}
